from Raptor.Raptor import Raptor
from Grass.Grass import Grass
from Wings.Kotys import Bendis, Bendis2
from Wings.Bendis import Settings

import random

# in_sys=2
# in_sys=3
# in_sys=5
# rule = [0,1,1,0,1,1,1,0]
# rule = [0,1,1,1,0,1,1,0]
# rule = [0,1,1,2,0,1,1,0,2]

# rule = [0,2,1,2,0,1,2,0,0]
# rule = [0,1,1,2,2,1,4,0,2,0,1,4,3,2,1,3,1,0,2,1,1,0,4,2,1][::-1]


setting = Settings()
# setting.cols = 53
setting.cols = 300
setting.rows = 3000
# in_sys = 2
in_sys = 5


# rule = [0,1,1,0,1,1,1,0]
# rule = [0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1]
# rule = [0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0]

# rule = [random.randint(0,4) for _ in range(125)]
rule = []
for _ in range(25):
    rule.extend((0,1,2,3,4))
print(rule)
random.shuffle(rule)
# rule = [0, 0, 3, 3, 4, 1, 2, 3, 3, 0, 0, 4, 1, 3, 0, 2, 3, 2, 3, 2, 2, 2, 0, 4, 0, 0, 3, 2, 4, 0, 3, 3, 2, 0, 3, 4, 1, 4, 3, 0, 3, 3, 4, 3, 1, 1, 1, 0, 0, 0, 2, 3, 2, 2, 4, 2, 1, 4, 3, 2, 0, 4, 4, 2, 0, 4, 0, 3, 3, 1, 3, 0, 3, 2, 0, 1, 1, 0, 2, 3, 2, 3, 4, 0, 0, 2, 3, 1, 1, 4, 4, 3, 0, 1, 4, 4, 4, 0, 4, 0, 4, 2, 0, 2, 0, 3, 2, 2, 0, 2, 2, 2, 4, 0, 1, 2, 4, 2, 1, 1, 1, 0, 1, 0, 4]
# rule = [4, 0, 0, 1, 1, 2, 1, 2, 1, 1, 3, 2, 4, 4, 4, 3, 1, 2, 3, 4, 1, 0, 2, 1, 4, 2, 4, 3, 2, 4, 2, 3, 4, 2, 0, 4, 1, 3, 1, 2, 2, 0, 3, 4, 3, 2, 0, 0, 4, 2, 2, 4, 0, 2, 4, 2, 0, 4, 0, 0, 1, 3, 3, 2, 3, 3, 4, 0, 1, 1, 4, 0, 3, 4, 3, 3, 4, 4, 0, 4, 4, 2, 0, 4, 1, 4, 3, 0, 1, 0, 2, 2, 3, 4, 2, 3, 4, 2, 3, 2, 2, 2, 1, 4, 3, 3, 4, 2, 2, 2, 0, 0, 0, 4, 4, 4, 2, 3, 0, 2, 2, 2, 4, 1, 0]
# rule = [0, 4, 4, 1, 4, 3, 3, 1, 3, 4, 3, 4, 4, 1, 0, 4, 1, 1, 3, 1, 3, 3, 4, 0, 4, 3, 0, 1, 3, 4, 0, 3, 0, 3, 3, 1, 4, 3, 1, 2, 0, 4, 4, 2, 4, 2, 4, 1, 1, 4, 4, 0, 0, 4, 1, 3, 3, 4, 0, 0, 4, 4, 3, 2, 0, 2, 1, 3, 3, 2, 1, 1, 1, 3, 4, 4, 2, 4, 3, 1, 3, 2, 0, 1, 1, 3, 0, 3, 0, 0, 0, 2, 2, 3, 2, 2, 1, 4, 2, 1, 1, 1, 1, 2, 1, 1, 0, 0, 4, 4, 4, 0, 1, 0, 0, 2, 1, 2, 2, 1, 4, 4, 1, 0, 3]
# rule = [0, 4, 3, 2, 4, 2, 3, 1, 0, 4, 3, 4, 3, 1, 2, 4, 0, 0, 3, 1, 3, 1, 4, 0, 4, 3, 0, 1, 3, 4, 0, 3, 0, 1, 2, 1, 4, 3, 1, 2, 0, 4, 4, 2, 3, 2, 0, 1, 1, 4, 2, 0, 0, 4, 1, 3, 3, 4, 0, 2, 4, 4, 3, 2, 0, 1, 1, 3, 2, 2, 1, 3, 1, 3, 4, 4, 2, 4, 3, 1, 3, 2, 0, 1, 4, 3, 0, 3, 0, 3, 0, 2, 2, 3, 2, 2, 1, 4, 2, 1, 1, 1, 1, 2, 1, 1, 0, 0, 4, 2, 4, 0, 1, 0, 0, 2, 1, 3, 2, 1, 4, 4, 1, 0, 3]
# rule = [0, 3, 2, 2, 3, 2, 1, 0, 1, 4, 1, 3, 3, 4, 3, 4, 2, 2, 2, 4, 4, 4, 1, 0, 0, 0, 0, 0, 4, 1, 3, 3, 3, 3, 4, 2, 1, 3, 2, 2, 3, 0, 0, 2, 3, 0, 2, 1, 1, 4, 0, 1, 0, 4, 1, 4, 2, 0, 4, 2, 2, 4, 2, 4, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 4, 3, 3, 1, 3, 0, 2, 1, 4, 3, 3, 4, 4, 3, 4, 2, 0, 1, 2, 2, 4, 1, 1, 1, 0, 1, 4, 2, 3, 1, 4, 0, 3, 3, 3, 2, 1, 4, 0, 0, 3, 3, 0, 2, 4, 1, 4, 1, 3, 1, 2]
# ruke = [3, 0, 4, 2, 4, 3, 2, 4, 3, 4, 0, 1, 1, 2, 1, 4, 0, 0, 4, 0, 4, 2, 3, 1, 3, 2, 3, 1, 4, 0, 4, 0, 2, 4, 2, 1, 3, 4, 4, 4, 1, 3, 0, 3, 0, 2, 1, 1, 1, 0, 3, 0, 2, 3, 0, 3, 0, 3, 2, 2, 1, 3, 0, 1, 1, 1, 4, 1, 0, 4, 3, 4, 2, 2, 4, 2, 4, 1, 2, 2, 4, 2, 1, 3, 1, 0, 3, 1, 1, 2, 2, 1, 0, 4, 3, 0, 3, 2, 4, 0, 3, 3, 0, 4, 2, 2, 3, 1, 1, 0, 0, 4, 0, 4, 0, 2, 4, 0, 3, 3, 3, 1, 2, 2, 1]
# rule = [3, 0, 4, 2, 4, 3, 2, 4, 3, 4, 0, 1, 1, 2, 1, 4, 0, 0, 4, 0, 4, 2, 3, 1, 3, 2, 3, 1, 4, 0, 4, 0, 2, 4, 2, 1, 3, 4, 4, 4, 1, 3, 0, 3, 0, 2, 1, 1, 1, 0, 3, 0, 2, 3, 0, 3, 0, 3, 2, 2, 1, 3, 0, 1, 1, 1, 4, 1, 0, 4, 3, 4, 2, 2, 4, 2, 4, 1, 2, 2, 4, 2, 1, 3, 1, 0, 3, 1, 1, 2, 2, 1, 0, 4, 3, 0, 3, 2, 4, 0, 3, 3, 0, 4, 2, 2, 3, 1, 1, 0, 0, 4, 0, 4, 0, 2, 4, 0, 3, 3, 3, 1, 2, 2, 1]
print("rule", rule)
rap = Raptor(rule,in_sys)


# rand = [[random.randint(0,1) for _ in range(8)] for _ in range(setting.cols)]
# rand = [[random.randint(0,1) for _ in range(8)] for _ in range(20)]
rand = [[random.randint(0,4) for _ in range(125)] for _ in range(5)]
raptors = [Raptor(i, in_sys) for i in rand]
for raptor in raptors:
    print(raptor.rule)
# print(rap.neighbor_count)
oned = setting.cols
gra = Grass(oned)
gra._set_center(1)
# gra._set_random(2)
# gra._set_product(in_sys, rap.neighbor_count)
Bendis(rap, gra, setting)
# Bendis2(raptors, gra, setting)


# conwayrule
# conwayrule = [*conwayrule]
# conwayrule = list(map(int, conwayrule))
# # conwayrule = conwayrule*512
# # print(len(conwayrule))
# rap = Raptor(conwayrule,in_sys)
# # print(rap.neighbor_count)
# twod = [setting.cols, setting.cols]
# gra = Grass(twod)
# # gra._set_center(1)
# gra._set_random(2)
# # gra._set_product(in_sys, rap.neighbor_count)
# Bendis(rap, gra, setting, False)

# print(gra.data.ndim)











# print(rap.neighbor_count)
# print(rap.io([0,1,0]))
# gra = Grass(100,1)
# gra.set_center(1)
# print(gra.data)
# gra.mutate_all(rap)


# for i in range(100):
#     gra.mutate_all_moore(rap)
#     print(gra.data)

# data = np.zeros(tuple(35 for _ in range(1)), dtype=int)
# Logic.data.set_center(1, data)
# print(data)

# for i in range(100):
#     data = Logic.data.mutate_all_moore(rap, data, 1, rap.neighbor_count, True)
#     print(data)
# # Logic.data.mutate_all_moore(rap, data, 2, rap.neighbor_count, True)